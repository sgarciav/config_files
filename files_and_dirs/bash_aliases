## tinwhistle box ~/.bash_aliases file for user
# User specific aliases and functions

# start from home directory
cd ~

# Clear the terminal
alias cls='clear'

# view the ROS package ros environment variable
alias ros_pack_path='echo $ROS_PACKAGE_PATH'

# open pictures
alias pic_open='gnome-open'

# clear screen and go to home directory
alias god='cd && clear'

# analyze tf tree and show results
alias runtf='rosrun tf2_tools view_frames.py && rm frames.gv && evince frames.pdf'

# add source statement to .bashrc file
alias src2bashrc='echo "source $(readlink -f ./devel/setup.bash)" >> ~/.bashrc'

# remove dangling docker images (i.e. <none>:<none> images that are not referenced by anything)
alias drmi_dangling='docker rmi $(docker images -f "dangling=true" -q)'

# open zotero
alias zotero='cd ~ && ./Zotero/zotero &'

# git status
alias gs='git status'

# git log
alias gl='git log --oneline --decorate --graph'

# -------------------------------------------------------------

# open document with emacs in terminal
docedit() {
    emacs -nw $1
}

# open document using locate
open_locate() {
    docedit $(echo $(locate $1))
}

# speed up videos using ffmpeg
speedup_4x() {
    ffmpeg -i $1 -r 120 -filter:v "setpts=0.25*PTS" $2
}

# generate video from frames (framerate usually 25)
genvid() {
    ffmpeg -framerate $1 -i %*.jpg -c:v libx264 -profile:v high -crf 20 -pix_fmt yuv420p output.mp4
}

# generate urdf file from xacro file
xacro2urdf() {
    rosrun xacro xacro.py --inorder $1 roboname:=car0 > urdf_output.urdf
}

# encrypt/decrypt
encrypt() {
    openssl aes-256-cbc -in $1 -out $1.aes && rm $1
}
decrypt() {
    openssl aes-256-cbc -d -in $1.$2.aes -out $1.$2 && rm $1.$2.aes
}

# cd and ls into a directory
cdl() {
    cd $1 && ll
}

# convert from *.doc and *.docx to *.pdf
topdf() {
    lowriter --convert-to pdf $1
}

# analyze CPU
analyze_cpu(){
    log_time=$(date +"%Y_%m_%d_%H_%M_%S")
    num_process=16
    while true; do (echo "%CPU %MEM ARGS $(date)" && ps -e -o pcpu,pmem,args --sort=-pcpu | cut -d" " -f1-6 | head -n$num_process | tail -n$(expr $num_process - 1)) >> ~/cpu_log_$log_time.log; sleep 1; done
}

# split file into smaller files
splitme() {
    split --bytes=$1 --numeric-suffixes --suffix-length=2 $2 $2.
}

# convert markdown file to pdf
# See: https://superuser.com/questions/689056/how-can-i-convert-github-flavored-markdown-to-a-pdf
# sudo pip install grip && sudo apt-get install wkhtmltopdf
md2pdf() {
    grip $1.md --export deleteme.html && wkhtmltopdf deleteme.html $1.pdf && rm deleteme.html
}
